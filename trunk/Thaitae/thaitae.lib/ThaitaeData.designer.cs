#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace thaitae.lib
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Thaitae")]
	public partial class ThaitaeDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLeague(League instance);
    partial void UpdateLeague(League instance);
    partial void DeleteLeague(League instance);
    partial void InsertSeason(Season instance);
    partial void UpdateSeason(Season instance);
    partial void DeleteSeason(Season instance);
    partial void InsertTeamSeason(TeamSeason instance);
    partial void UpdateTeamSeason(TeamSeason instance);
    partial void DeleteTeamSeason(TeamSeason instance);
    partial void InsertMatch(Match instance);
    partial void UpdateMatch(Match instance);
    partial void DeleteMatch(Match instance);
    partial void InsertTeamMatch(TeamMatch instance);
    partial void UpdateTeamMatch(TeamMatch instance);
    partial void DeleteTeamMatch(TeamMatch instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertPlayerMatch(PlayerMatch instance);
    partial void UpdatePlayerMatch(PlayerMatch instance);
    partial void DeletePlayerMatch(PlayerMatch instance);
    partial void InsertErrorLog(ErrorLog instance);
    partial void UpdateErrorLog(ErrorLog instance);
    partial void DeleteErrorLog(ErrorLog instance);
    partial void InsertNew(New instance);
    partial void UpdateNew(New instance);
    partial void DeleteNew(New instance);
    #endregion
		
		public ThaitaeDataDataContext() : 
				base(global::thaitae.lib.Properties.Settings.Default.ThaitaeConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public ThaitaeDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ThaitaeDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ThaitaeDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ThaitaeDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<League> Leagues
		{
			get
			{
				return this.GetTable<League>();
			}
		}
		
		public System.Data.Linq.Table<Season> Seasons
		{
			get
			{
				return this.GetTable<Season>();
			}
		}
		
		public System.Data.Linq.Table<TeamSeason> TeamSeasons
		{
			get
			{
				return this.GetTable<TeamSeason>();
			}
		}
		
		public System.Data.Linq.Table<Match> Matches
		{
			get
			{
				return this.GetTable<Match>();
			}
		}
		
		public System.Data.Linq.Table<TeamMatch> TeamMatches
		{
			get
			{
				return this.GetTable<TeamMatch>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<PlayerMatch> PlayerMatches
		{
			get
			{
				return this.GetTable<PlayerMatch>();
			}
		}
		
		public System.Data.Linq.Table<ErrorLog> ErrorLogs
		{
			get
			{
				return this.GetTable<ErrorLog>();
			}
		}
		
		public System.Data.Linq.Table<New> News
		{
			get
			{
				return this.GetTable<New>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="thaitae.League")]
	public partial class League : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeagueId;
		
		private string _LeagueName;
		
		private int _LeagueType;
		
		private string _LeagueDesc;
		
		private int _Active;
		
		private int _OrderIndex;
		
		private EntitySet<Season> _Seasons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeagueIdChanging(int value);
    partial void OnLeagueIdChanged();
    partial void OnLeagueNameChanging(string value);
    partial void OnLeagueNameChanged();
    partial void OnLeagueTypeChanging(int value);
    partial void OnLeagueTypeChanged();
    partial void OnLeagueDescChanging(string value);
    partial void OnLeagueDescChanged();
    partial void OnActiveChanging(int value);
    partial void OnActiveChanged();
    partial void OnOrderIndexChanging(int value);
    partial void OnOrderIndexChanged();
    #endregion
		
		public League()
		{
			this._Seasons = new EntitySet<Season>(new Action<Season>(this.attach_Seasons), new Action<Season>(this.detach_Seasons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LeagueId
		{
			get
			{
				return this._LeagueId;
			}
			set
			{
				if ((this._LeagueId != value))
				{
					this.OnLeagueIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueId = value;
					this.SendPropertyChanged("LeagueId");
					this.OnLeagueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LeagueName
		{
			get
			{
				return this._LeagueName;
			}
			set
			{
				if ((this._LeagueName != value))
				{
					this.OnLeagueNameChanging(value);
					this.SendPropertyChanging();
					this._LeagueName = value;
					this.SendPropertyChanged("LeagueName");
					this.OnLeagueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueType", DbType="Int NOT NULL")]
		public int LeagueType
		{
			get
			{
				return this._LeagueType;
			}
			set
			{
				if ((this._LeagueType != value))
				{
					this.OnLeagueTypeChanging(value);
					this.SendPropertyChanging();
					this._LeagueType = value;
					this.SendPropertyChanged("LeagueType");
					this.OnLeagueTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueDesc", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LeagueDesc
		{
			get
			{
				return this._LeagueDesc;
			}
			set
			{
				if ((this._LeagueDesc != value))
				{
					this.OnLeagueDescChanging(value);
					this.SendPropertyChanging();
					this._LeagueDesc = value;
					this.SendPropertyChanged("LeagueDesc");
					this.OnLeagueDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Int NOT NULL")]
		public int Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderIndex")]
		public int OrderIndex
		{
			get
			{
				return this._OrderIndex;
			}
			set
			{
				if ((this._OrderIndex != value))
				{
					this.OnOrderIndexChanging(value);
					this.SendPropertyChanging();
					this._OrderIndex = value;
					this.SendPropertyChanged("OrderIndex");
					this.OnOrderIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_Season", Storage="_Seasons", ThisKey="LeagueId", OtherKey="LeagueId")]
		public EntitySet<Season> Seasons
		{
			get
			{
				return this._Seasons;
			}
			set
			{
				this._Seasons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Seasons(Season entity)
		{
			this.SendPropertyChanging();
			entity.League = this;
		}
		
		private void detach_Seasons(Season entity)
		{
			this.SendPropertyChanging();
			entity.League = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="thaitae.Season")]
	public partial class Season : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeasonId;
		
		private int _LeagueId;
		
		private string _SeasonName;
		
		private string _SeasonDesc;
		
		private EntitySet<TeamSeason> _TeamSeasons;
		
		private EntitySet<Match> _Matches;
		
		private EntityRef<League> _League;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeasonIdChanging(int value);
    partial void OnSeasonIdChanged();
    partial void OnLeagueIdChanging(int value);
    partial void OnLeagueIdChanged();
    partial void OnSeasonNameChanging(string value);
    partial void OnSeasonNameChanged();
    partial void OnSeasonDescChanging(string value);
    partial void OnSeasonDescChanged();
    #endregion
		
		public Season()
		{
			this._TeamSeasons = new EntitySet<TeamSeason>(new Action<TeamSeason>(this.attach_TeamSeasons), new Action<TeamSeason>(this.detach_TeamSeasons));
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._League = default(EntityRef<League>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SeasonId
		{
			get
			{
				return this._SeasonId;
			}
			set
			{
				if ((this._SeasonId != value))
				{
					this.OnSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._SeasonId = value;
					this.SendPropertyChanged("SeasonId");
					this.OnSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueId", DbType="Int NOT NULL")]
		public int LeagueId
		{
			get
			{
				return this._LeagueId;
			}
			set
			{
				if ((this._LeagueId != value))
				{
					if (this._League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueId = value;
					this.SendPropertyChanged("LeagueId");
					this.OnLeagueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonName", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string SeasonName
		{
			get
			{
				return this._SeasonName;
			}
			set
			{
				if ((this._SeasonName != value))
				{
					this.OnSeasonNameChanging(value);
					this.SendPropertyChanging();
					this._SeasonName = value;
					this.SendPropertyChanged("SeasonName");
					this.OnSeasonNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonDesc", DbType="NVarChar(50)")]
		public string SeasonDesc
		{
			get
			{
				return this._SeasonDesc;
			}
			set
			{
				if ((this._SeasonDesc != value))
				{
					this.OnSeasonDescChanging(value);
					this.SendPropertyChanging();
					this._SeasonDesc = value;
					this.SendPropertyChanged("SeasonDesc");
					this.OnSeasonDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_TeamSeason", Storage="_TeamSeasons", ThisKey="SeasonId", OtherKey="SeasonId")]
		public EntitySet<TeamSeason> TeamSeasons
		{
			get
			{
				return this._TeamSeasons;
			}
			set
			{
				this._TeamSeasons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_Match", Storage="_Matches", ThisKey="SeasonId", OtherKey="SeasonId")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_Season", Storage="_League", ThisKey="LeagueId", OtherKey="LeagueId", IsForeignKey=true)]
		public League League
		{
			get
			{
				return this._League.Entity;
			}
			set
			{
				League previousValue = this._League.Entity;
				if (((previousValue != value) 
							|| (this._League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._League.Entity = null;
						previousValue.Seasons.Remove(this);
					}
					this._League.Entity = value;
					if ((value != null))
					{
						value.Seasons.Add(this);
						this._LeagueId = value.LeagueId;
					}
					else
					{
						this._LeagueId = default(int);
					}
					this.SendPropertyChanged("League");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamSeasons(TeamSeason entity)
		{
			this.SendPropertyChanging();
			entity.Season = this;
		}
		
		private void detach_TeamSeasons(TeamSeason entity)
		{
			this.SendPropertyChanging();
			entity.Season = null;
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Season = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Season = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="thaitae.TeamSeason")]
	public partial class TeamSeason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamSeasonId;
		
		private int _TeamId;
		
		private int _SeasonId;
		
		private int _TeamMatchPlayed;
		
		private int _TeamWon;
		
		private int _TeamDrew;
		
		private int _TeamLoss;
		
		private int _TeamGoalFor;
		
		private int _TeamGoalAgainst;
		
		private int _TeamPts;
		
		private int _TeamGoalDiff;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<Season> _Season;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamSeasonIdChanging(int value);
    partial void OnTeamSeasonIdChanged();
    partial void OnTeamIdChanging(int value);
    partial void OnTeamIdChanged();
    partial void OnSeasonIdChanging(int value);
    partial void OnSeasonIdChanged();
    partial void OnTeamMatchPlayedChanging(int value);
    partial void OnTeamMatchPlayedChanged();
    partial void OnTeamWonChanging(int value);
    partial void OnTeamWonChanged();
    partial void OnTeamDrewChanging(int value);
    partial void OnTeamDrewChanged();
    partial void OnTeamLossChanging(int value);
    partial void OnTeamLossChanged();
    partial void OnTeamGoalForChanging(int value);
    partial void OnTeamGoalForChanged();
    partial void OnTeamGoalAgainstChanging(int value);
    partial void OnTeamGoalAgainstChanged();
    partial void OnTeamPtsChanging(int value);
    partial void OnTeamPtsChanged();
    partial void OnTeamGoalDiffChanging(int value);
    partial void OnTeamGoalDiffChanged();
    #endregion
		
		public TeamSeason()
		{
			this._Team = default(EntityRef<Team>);
			this._Season = default(EntityRef<Season>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamSeasonId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeamSeasonId
		{
			get
			{
				return this._TeamSeasonId;
			}
			set
			{
				if ((this._TeamSeasonId != value))
				{
					this.OnTeamSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._TeamSeasonId = value;
					this.SendPropertyChanged("TeamSeasonId");
					this.OnTeamSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="Int NOT NULL")]
		public int TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonId", DbType="Int NOT NULL")]
		public int SeasonId
		{
			get
			{
				return this._SeasonId;
			}
			set
			{
				if ((this._SeasonId != value))
				{
					if (this._Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._SeasonId = value;
					this.SendPropertyChanged("SeasonId");
					this.OnSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamMatchPlayed", DbType="Int NOT NULL")]
		public int TeamMatchPlayed
		{
			get
			{
				return this._TeamMatchPlayed;
			}
			set
			{
				if ((this._TeamMatchPlayed != value))
				{
					this.OnTeamMatchPlayedChanging(value);
					this.SendPropertyChanging();
					this._TeamMatchPlayed = value;
					this.SendPropertyChanged("TeamMatchPlayed");
					this.OnTeamMatchPlayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamWon", DbType="Int NOT NULL")]
		public int TeamWon
		{
			get
			{
				return this._TeamWon;
			}
			set
			{
				if ((this._TeamWon != value))
				{
					this.OnTeamWonChanging(value);
					this.SendPropertyChanging();
					this._TeamWon = value;
					this.SendPropertyChanged("TeamWon");
					this.OnTeamWonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamDrew", DbType="Int NOT NULL")]
		public int TeamDrew
		{
			get
			{
				return this._TeamDrew;
			}
			set
			{
				if ((this._TeamDrew != value))
				{
					this.OnTeamDrewChanging(value);
					this.SendPropertyChanging();
					this._TeamDrew = value;
					this.SendPropertyChanged("TeamDrew");
					this.OnTeamDrewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamLoss", DbType="Int NOT NULL")]
		public int TeamLoss
		{
			get
			{
				return this._TeamLoss;
			}
			set
			{
				if ((this._TeamLoss != value))
				{
					this.OnTeamLossChanging(value);
					this.SendPropertyChanging();
					this._TeamLoss = value;
					this.SendPropertyChanged("TeamLoss");
					this.OnTeamLossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamGoalFor", DbType="Int NOT NULL")]
		public int TeamGoalFor
		{
			get
			{
				return this._TeamGoalFor;
			}
			set
			{
				if ((this._TeamGoalFor != value))
				{
					this.OnTeamGoalForChanging(value);
					this.SendPropertyChanging();
					this._TeamGoalFor = value;
					this.SendPropertyChanged("TeamGoalFor");
					this.OnTeamGoalForChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamGoalAgainst", DbType="Int NOT NULL")]
		public int TeamGoalAgainst
		{
			get
			{
				return this._TeamGoalAgainst;
			}
			set
			{
				if ((this._TeamGoalAgainst != value))
				{
					this.OnTeamGoalAgainstChanging(value);
					this.SendPropertyChanging();
					this._TeamGoalAgainst = value;
					this.SendPropertyChanged("TeamGoalAgainst");
					this.OnTeamGoalAgainstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamPts", DbType="Int NOT NULL")]
		public int TeamPts
		{
			get
			{
				return this._TeamPts;
			}
			set
			{
				if ((this._TeamPts != value))
				{
					this.OnTeamPtsChanging(value);
					this.SendPropertyChanging();
					this._TeamPts = value;
					this.SendPropertyChanged("TeamPts");
					this.OnTeamPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamGoalDiff", DbType="Int NOT NULL")]
		public int TeamGoalDiff
		{
			get
			{
				return this._TeamGoalDiff;
			}
			set
			{
				if ((this._TeamGoalDiff != value))
				{
					this.OnTeamGoalDiffChanging(value);
					this.SendPropertyChanging();
					this._TeamGoalDiff = value;
					this.SendPropertyChanged("TeamGoalDiff");
					this.OnTeamGoalDiffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamSeason", Storage="_Team", ThisKey="TeamId", OtherKey="TeamId", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamSeasons.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamSeasons.Add(this);
						this._TeamId = value.TeamId;
					}
					else
					{
						this._TeamId = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_TeamSeason", Storage="_Season", ThisKey="SeasonId", OtherKey="SeasonId", IsForeignKey=true)]
		public Season Season
		{
			get
			{
				return this._Season.Entity;
			}
			set
			{
				Season previousValue = this._Season.Entity;
				if (((previousValue != value) 
							|| (this._Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Season.Entity = null;
						previousValue.TeamSeasons.Remove(this);
					}
					this._Season.Entity = value;
					if ((value != null))
					{
						value.TeamSeasons.Add(this);
						this._SeasonId = value.SeasonId;
					}
					else
					{
						this._SeasonId = default(int);
					}
					this.SendPropertyChanged("Season");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="thaitae.Match")]
	public partial class Match : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MatchId;
		
		private System.DateTime _MatchDate;
		
		private int _SeasonId;
		
		private int _TeamHomeId;
		
		private int _TeamAwayId;
		
		private EntitySet<TeamMatch> _TeamMatches;
		
		private EntitySet<PlayerMatch> _PlayerMatches;
		
		private EntityRef<Season> _Season;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(int value);
    partial void OnMatchIdChanged();
    partial void OnMatchDateChanging(System.DateTime value);
    partial void OnMatchDateChanged();
    partial void OnSeasonIdChanging(int value);
    partial void OnSeasonIdChanged();
    partial void OnTeamHomeIdChanging(int value);
    partial void OnTeamHomeIdChanged();
    partial void OnTeamAwayIdChanging(int value);
    partial void OnTeamAwayIdChanged();
    #endregion
		
		public Match()
		{
			this._TeamMatches = new EntitySet<TeamMatch>(new Action<TeamMatch>(this.attach_TeamMatches), new Action<TeamMatch>(this.detach_TeamMatches));
			this._PlayerMatches = new EntitySet<PlayerMatch>(new Action<PlayerMatch>(this.attach_PlayerMatches), new Action<PlayerMatch>(this.detach_PlayerMatches));
			this._Season = default(EntityRef<Season>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchDate")]
		public System.DateTime MatchDate
		{
			get
			{
				return this._MatchDate;
			}
			set
			{
				if ((this._MatchDate != value))
				{
					this.OnMatchDateChanging(value);
					this.SendPropertyChanging();
					this._MatchDate = value;
					this.SendPropertyChanged("MatchDate");
					this.OnMatchDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonId")]
		public int SeasonId
		{
			get
			{
				return this._SeasonId;
			}
			set
			{
				if ((this._SeasonId != value))
				{
					if (this._Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._SeasonId = value;
					this.SendPropertyChanged("SeasonId");
					this.OnSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamHomeId")]
		public int TeamHomeId
		{
			get
			{
				return this._TeamHomeId;
			}
			set
			{
				if ((this._TeamHomeId != value))
				{
					this.OnTeamHomeIdChanging(value);
					this.SendPropertyChanging();
					this._TeamHomeId = value;
					this.SendPropertyChanged("TeamHomeId");
					this.OnTeamHomeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamAwayId")]
		public int TeamAwayId
		{
			get
			{
				return this._TeamAwayId;
			}
			set
			{
				if ((this._TeamAwayId != value))
				{
					this.OnTeamAwayIdChanging(value);
					this.SendPropertyChanging();
					this._TeamAwayId = value;
					this.SendPropertyChanged("TeamAwayId");
					this.OnTeamAwayIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_TeamMatch", Storage="_TeamMatches", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<TeamMatch> TeamMatches
		{
			get
			{
				return this._TeamMatches;
			}
			set
			{
				this._TeamMatches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_PlayerMatch", Storage="_PlayerMatches", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<PlayerMatch> PlayerMatches
		{
			get
			{
				return this._PlayerMatches;
			}
			set
			{
				this._PlayerMatches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_Match", Storage="_Season", ThisKey="SeasonId", OtherKey="SeasonId", IsForeignKey=true)]
		public Season Season
		{
			get
			{
				return this._Season.Entity;
			}
			set
			{
				Season previousValue = this._Season.Entity;
				if (((previousValue != value) 
							|| (this._Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Season.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Season.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._SeasonId = value.SeasonId;
					}
					else
					{
						this._SeasonId = default(int);
					}
					this.SendPropertyChanged("Season");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamMatches(TeamMatch entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_TeamMatches(TeamMatch entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_PlayerMatches(PlayerMatch entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_PlayerMatches(PlayerMatch entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="thaitae.TeamMatch")]
	public partial class TeamMatch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamMatchId;
		
		private int _MatchId;
		
		private int _TeamId;
		
		private System.Nullable<int> _TeamGoalFor;
		
		private System.Nullable<int> _TeamYellowCard;
		
		private System.Nullable<int> _TeamRedCard;
		
		private System.Nullable<int> _TeamStatus;
		
		private System.Nullable<int> _TeamGoalAgainst;
		
		private int _TeamHome;
		
		private int _SeasonId;
		
		private int _TeamEdited;
		
		private EntityRef<Match> _Match;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamMatchIdChanging(int value);
    partial void OnTeamMatchIdChanged();
    partial void OnMatchIdChanging(int value);
    partial void OnMatchIdChanged();
    partial void OnTeamIdChanging(int value);
    partial void OnTeamIdChanged();
    partial void OnTeamGoalForChanging(System.Nullable<int> value);
    partial void OnTeamGoalForChanged();
    partial void OnTeamYellowCardChanging(System.Nullable<int> value);
    partial void OnTeamYellowCardChanged();
    partial void OnTeamRedCardChanging(System.Nullable<int> value);
    partial void OnTeamRedCardChanged();
    partial void OnTeamStatusChanging(System.Nullable<int> value);
    partial void OnTeamStatusChanged();
    partial void OnTeamGoalAgainstChanging(System.Nullable<int> value);
    partial void OnTeamGoalAgainstChanged();
    partial void OnTeamHomeChanging(int value);
    partial void OnTeamHomeChanged();
    partial void OnSeasonIdChanging(int value);
    partial void OnSeasonIdChanged();
    partial void OnTeamEditedChanging(int value);
    partial void OnTeamEditedChanged();
    #endregion
		
		public TeamMatch()
		{
			this._Match = default(EntityRef<Match>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamMatchId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeamMatchId
		{
			get
			{
				return this._TeamMatchId;
			}
			set
			{
				if ((this._TeamMatchId != value))
				{
					this.OnTeamMatchIdChanging(value);
					this.SendPropertyChanging();
					this._TeamMatchId = value;
					this.SendPropertyChanged("TeamMatchId");
					this.OnTeamMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="Int NOT NULL")]
		public int MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="Int NOT NULL")]
		public int TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamGoalFor", DbType="Int")]
		public System.Nullable<int> TeamGoalFor
		{
			get
			{
				return this._TeamGoalFor;
			}
			set
			{
				if ((this._TeamGoalFor != value))
				{
					this.OnTeamGoalForChanging(value);
					this.SendPropertyChanging();
					this._TeamGoalFor = value;
					this.SendPropertyChanged("TeamGoalFor");
					this.OnTeamGoalForChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamYellowCard", DbType="Int")]
		public System.Nullable<int> TeamYellowCard
		{
			get
			{
				return this._TeamYellowCard;
			}
			set
			{
				if ((this._TeamYellowCard != value))
				{
					this.OnTeamYellowCardChanging(value);
					this.SendPropertyChanging();
					this._TeamYellowCard = value;
					this.SendPropertyChanged("TeamYellowCard");
					this.OnTeamYellowCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamRedCard", DbType="Int")]
		public System.Nullable<int> TeamRedCard
		{
			get
			{
				return this._TeamRedCard;
			}
			set
			{
				if ((this._TeamRedCard != value))
				{
					this.OnTeamRedCardChanging(value);
					this.SendPropertyChanging();
					this._TeamRedCard = value;
					this.SendPropertyChanged("TeamRedCard");
					this.OnTeamRedCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamStatus", DbType="Int")]
		public System.Nullable<int> TeamStatus
		{
			get
			{
				return this._TeamStatus;
			}
			set
			{
				if ((this._TeamStatus != value))
				{
					this.OnTeamStatusChanging(value);
					this.SendPropertyChanging();
					this._TeamStatus = value;
					this.SendPropertyChanged("TeamStatus");
					this.OnTeamStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamGoalAgainst", DbType="Int")]
		public System.Nullable<int> TeamGoalAgainst
		{
			get
			{
				return this._TeamGoalAgainst;
			}
			set
			{
				if ((this._TeamGoalAgainst != value))
				{
					this.OnTeamGoalAgainstChanging(value);
					this.SendPropertyChanging();
					this._TeamGoalAgainst = value;
					this.SendPropertyChanged("TeamGoalAgainst");
					this.OnTeamGoalAgainstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamHome")]
		public int TeamHome
		{
			get
			{
				return this._TeamHome;
			}
			set
			{
				if ((this._TeamHome != value))
				{
					this.OnTeamHomeChanging(value);
					this.SendPropertyChanging();
					this._TeamHome = value;
					this.SendPropertyChanged("TeamHome");
					this.OnTeamHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonId")]
		public int SeasonId
		{
			get
			{
				return this._SeasonId;
			}
			set
			{
				if ((this._SeasonId != value))
				{
					this.OnSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._SeasonId = value;
					this.SendPropertyChanged("SeasonId");
					this.OnSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamEdited")]
		public int TeamEdited
		{
			get
			{
				return this._TeamEdited;
			}
			set
			{
				if ((this._TeamEdited != value))
				{
					this.OnTeamEditedChanging(value);
					this.SendPropertyChanging();
					this._TeamEdited = value;
					this.SendPropertyChanged("TeamEdited");
					this.OnTeamEditedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_TeamMatch", Storage="_Match", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.TeamMatches.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.TeamMatches.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(int);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamMatch", Storage="_Team", ThisKey="TeamId", OtherKey="TeamId", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamMatches.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamMatches.Add(this);
						this._TeamId = value.TeamId;
					}
					else
					{
						this._TeamId = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="thaitae.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamId;
		
		private string _TeamName;
		
		private string _TeamDesc;
		
		private int _Active;
		
		private EntitySet<TeamSeason> _TeamSeasons;
		
		private EntitySet<TeamMatch> _TeamMatches;
		
		private EntitySet<Player> _Players;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIdChanging(int value);
    partial void OnTeamIdChanged();
    partial void OnTeamNameChanging(string value);
    partial void OnTeamNameChanged();
    partial void OnTeamDescChanging(string value);
    partial void OnTeamDescChanged();
    partial void OnActiveChanging(int value);
    partial void OnActiveChanged();
    #endregion
		
		public Team()
		{
			this._TeamSeasons = new EntitySet<TeamSeason>(new Action<TeamSeason>(this.attach_TeamSeasons), new Action<TeamSeason>(this.detach_TeamSeasons));
			this._TeamMatches = new EntitySet<TeamMatch>(new Action<TeamMatch>(this.attach_TeamMatches), new Action<TeamMatch>(this.detach_TeamMatches));
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this.OnTeamNameChanging(value);
					this.SendPropertyChanging();
					this._TeamName = value;
					this.SendPropertyChanged("TeamName");
					this.OnTeamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamDesc", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TeamDesc
		{
			get
			{
				return this._TeamDesc;
			}
			set
			{
				if ((this._TeamDesc != value))
				{
					this.OnTeamDescChanging(value);
					this.SendPropertyChanging();
					this._TeamDesc = value;
					this.SendPropertyChanged("TeamDesc");
					this.OnTeamDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Int NOT NULL")]
		public int Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamSeason", Storage="_TeamSeasons", ThisKey="TeamId", OtherKey="TeamId")]
		public EntitySet<TeamSeason> TeamSeasons
		{
			get
			{
				return this._TeamSeasons;
			}
			set
			{
				this._TeamSeasons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamMatch", Storage="_TeamMatches", ThisKey="TeamId", OtherKey="TeamId")]
		public EntitySet<TeamMatch> TeamMatches
		{
			get
			{
				return this._TeamMatches;
			}
			set
			{
				this._TeamMatches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Players", ThisKey="TeamId", OtherKey="PlayerId")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamSeasons(TeamSeason entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_TeamSeasons(TeamSeason entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_TeamMatches(TeamMatch entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_TeamMatches(TeamMatch entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="thaitae.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerId;
		
		private System.Nullable<int> _PlayerGoal;
		
		private System.Nullable<int> _PlayerRedCard;
		
		private System.Nullable<int> _PlayerYellowCard;
		
		private int _Active;
		
		private int _TeamId;
		
		private int _SeasonId;
		
		private string _PlayerName;
		
		private int _PlayerNumber;
		
		private EntitySet<PlayerMatch> _PlayerMatches;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnPlayerGoalChanging(System.Nullable<int> value);
    partial void OnPlayerGoalChanged();
    partial void OnPlayerRedCardChanging(System.Nullable<int> value);
    partial void OnPlayerRedCardChanged();
    partial void OnPlayerYellowCardChanging(System.Nullable<int> value);
    partial void OnPlayerYellowCardChanged();
    partial void OnActiveChanging(int value);
    partial void OnActiveChanged();
    partial void OnTeamIdChanging(int value);
    partial void OnTeamIdChanged();
    partial void OnSeasonIdChanging(int value);
    partial void OnSeasonIdChanged();
    partial void OnPlayerNameChanging(string value);
    partial void OnPlayerNameChanged();
    partial void OnPlayerNumberChanging(int value);
    partial void OnPlayerNumberChanged();
    #endregion
		
		public Player()
		{
			this._PlayerMatches = new EntitySet<PlayerMatch>(new Action<PlayerMatch>(this.attach_PlayerMatches), new Action<PlayerMatch>(this.detach_PlayerMatches));
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerGoal", DbType="Int")]
		public System.Nullable<int> PlayerGoal
		{
			get
			{
				return this._PlayerGoal;
			}
			set
			{
				if ((this._PlayerGoal != value))
				{
					this.OnPlayerGoalChanging(value);
					this.SendPropertyChanging();
					this._PlayerGoal = value;
					this.SendPropertyChanged("PlayerGoal");
					this.OnPlayerGoalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerRedCard", DbType="Int")]
		public System.Nullable<int> PlayerRedCard
		{
			get
			{
				return this._PlayerRedCard;
			}
			set
			{
				if ((this._PlayerRedCard != value))
				{
					this.OnPlayerRedCardChanging(value);
					this.SendPropertyChanging();
					this._PlayerRedCard = value;
					this.SendPropertyChanged("PlayerRedCard");
					this.OnPlayerRedCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerYellowCard", DbType="Int")]
		public System.Nullable<int> PlayerYellowCard
		{
			get
			{
				return this._PlayerYellowCard;
			}
			set
			{
				if ((this._PlayerYellowCard != value))
				{
					this.OnPlayerYellowCardChanging(value);
					this.SendPropertyChanging();
					this._PlayerYellowCard = value;
					this.SendPropertyChanged("PlayerYellowCard");
					this.OnPlayerYellowCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Int NOT NULL")]
		public int Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId")]
		public int TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonId")]
		public int SeasonId
		{
			get
			{
				return this._SeasonId;
			}
			set
			{
				if ((this._SeasonId != value))
				{
					this.OnSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._SeasonId = value;
					this.SendPropertyChanged("SeasonId");
					this.OnSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerName", CanBeNull=false)]
		public string PlayerName
		{
			get
			{
				return this._PlayerName;
			}
			set
			{
				if ((this._PlayerName != value))
				{
					this.OnPlayerNameChanging(value);
					this.SendPropertyChanging();
					this._PlayerName = value;
					this.SendPropertyChanged("PlayerName");
					this.OnPlayerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerNumber")]
		public int PlayerNumber
		{
			get
			{
				return this._PlayerNumber;
			}
			set
			{
				if ((this._PlayerNumber != value))
				{
					this.OnPlayerNumberChanging(value);
					this.SendPropertyChanging();
					this._PlayerNumber = value;
					this.SendPropertyChanged("PlayerNumber");
					this.OnPlayerNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayerMatch", Storage="_PlayerMatches", ThisKey="PlayerId", OtherKey="PlayerId")]
		public EntitySet<PlayerMatch> PlayerMatches
		{
			get
			{
				return this._PlayerMatches;
			}
			set
			{
				this._PlayerMatches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Team", ThisKey="PlayerId", OtherKey="TeamId", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._PlayerId = value.TeamId;
					}
					else
					{
						this._PlayerId = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayerMatches(PlayerMatch entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_PlayerMatches(PlayerMatch entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="thaitae.PlayerMatch")]
	public partial class PlayerMatch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerMatchId;
		
		private System.Nullable<int> _PlayerId;
		
		private System.Nullable<int> _MatchId;
		
		private System.Nullable<int> _PlayerGoal;
		
		private System.Nullable<int> _PlayerYellowCard;
		
		private System.Nullable<int> _PlayerRedCard;
		
		private int _TeamId;
		
		private int _SeasonId;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Match> _Match;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerMatchIdChanging(int value);
    partial void OnPlayerMatchIdChanged();
    partial void OnPlayerIdChanging(System.Nullable<int> value);
    partial void OnPlayerIdChanged();
    partial void OnMatchIdChanging(System.Nullable<int> value);
    partial void OnMatchIdChanged();
    partial void OnPlayerGoalChanging(System.Nullable<int> value);
    partial void OnPlayerGoalChanged();
    partial void OnPlayerYellowCardChanging(System.Nullable<int> value);
    partial void OnPlayerYellowCardChanged();
    partial void OnPlayerRedCardChanging(System.Nullable<int> value);
    partial void OnPlayerRedCardChanged();
    partial void OnTeamIdChanging(int value);
    partial void OnTeamIdChanged();
    partial void OnSeasonIdChanging(int value);
    partial void OnSeasonIdChanged();
    #endregion
		
		public PlayerMatch()
		{
			this._Player = default(EntityRef<Player>);
			this._Match = default(EntityRef<Match>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerMatchId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlayerMatchId
		{
			get
			{
				return this._PlayerMatchId;
			}
			set
			{
				if ((this._PlayerMatchId != value))
				{
					this.OnPlayerMatchIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerMatchId = value;
					this.SendPropertyChanged("PlayerMatchId");
					this.OnPlayerMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int")]
		public System.Nullable<int> PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="Int")]
		public System.Nullable<int> MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerGoal", DbType="Int")]
		public System.Nullable<int> PlayerGoal
		{
			get
			{
				return this._PlayerGoal;
			}
			set
			{
				if ((this._PlayerGoal != value))
				{
					this.OnPlayerGoalChanging(value);
					this.SendPropertyChanging();
					this._PlayerGoal = value;
					this.SendPropertyChanged("PlayerGoal");
					this.OnPlayerGoalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerYellowCard", DbType="Int")]
		public System.Nullable<int> PlayerYellowCard
		{
			get
			{
				return this._PlayerYellowCard;
			}
			set
			{
				if ((this._PlayerYellowCard != value))
				{
					this.OnPlayerYellowCardChanging(value);
					this.SendPropertyChanging();
					this._PlayerYellowCard = value;
					this.SendPropertyChanged("PlayerYellowCard");
					this.OnPlayerYellowCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerRedCard", DbType="Int")]
		public System.Nullable<int> PlayerRedCard
		{
			get
			{
				return this._PlayerRedCard;
			}
			set
			{
				if ((this._PlayerRedCard != value))
				{
					this.OnPlayerRedCardChanging(value);
					this.SendPropertyChanging();
					this._PlayerRedCard = value;
					this.SendPropertyChanged("PlayerRedCard");
					this.OnPlayerRedCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId")]
		public int TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonId")]
		public int SeasonId
		{
			get
			{
				return this._SeasonId;
			}
			set
			{
				if ((this._SeasonId != value))
				{
					this.OnSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._SeasonId = value;
					this.SendPropertyChanged("SeasonId");
					this.OnSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayerMatch", Storage="_Player", ThisKey="PlayerId", OtherKey="PlayerId", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.PlayerMatches.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.PlayerMatches.Add(this);
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._PlayerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_PlayerMatch", Storage="_Match", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.PlayerMatches.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.PlayerMatches.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="tamujin.ErrorLogs")]
	public partial class ErrorLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ErrorId;
		
		private string _ErrorMessage;
		
		private System.Nullable<System.DateTime> _ErrorDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnErrorIdChanging(int value);
    partial void OnErrorIdChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    partial void OnErrorDateChanging(System.Nullable<System.DateTime> value);
    partial void OnErrorDateChanged();
    #endregion
		
		public ErrorLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ErrorId
		{
			get
			{
				return this._ErrorId;
			}
			set
			{
				if ((this._ErrorId != value))
				{
					this.OnErrorIdChanging(value);
					this.SendPropertyChanging();
					this._ErrorId = value;
					this.SendPropertyChanged("ErrorId");
					this.OnErrorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorMessage", DbType="NVarChar(MAX)")]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ErrorDate
		{
			get
			{
				return this._ErrorDate;
			}
			set
			{
				if ((this._ErrorDate != value))
				{
					this.OnErrorDateChanging(value);
					this.SendPropertyChanging();
					this._ErrorDate = value;
					this.SendPropertyChanged("ErrorDate");
					this.OnErrorDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="thaitae.News")]
	public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _newsId;
		
		private string _newsTopic;
		
		private string _newsContent;
		
		private string _picture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnewsIdChanging(int value);
    partial void OnnewsIdChanged();
    partial void OnnewsTopicChanging(string value);
    partial void OnnewsTopicChanged();
    partial void OnnewsContentChanging(string value);
    partial void OnnewsContentChanged();
    partial void OnpictureChanging(string value);
    partial void OnpictureChanged();
    #endregion
		
		public New()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newsId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int newsId
		{
			get
			{
				return this._newsId;
			}
			set
			{
				if ((this._newsId != value))
				{
					this.OnnewsIdChanging(value);
					this.SendPropertyChanging();
					this._newsId = value;
					this.SendPropertyChanged("newsId");
					this.OnnewsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newsTopic", DbType="VarChar(MAX)")]
		public string newsTopic
		{
			get
			{
				return this._newsTopic;
			}
			set
			{
				if ((this._newsTopic != value))
				{
					this.OnnewsTopicChanging(value);
					this.SendPropertyChanging();
					this._newsTopic = value;
					this.SendPropertyChanged("newsTopic");
					this.OnnewsTopicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newsContent", DbType="VarChar(MAX)")]
		public string newsContent
		{
			get
			{
				return this._newsContent;
			}
			set
			{
				if ((this._newsContent != value))
				{
					this.OnnewsContentChanging(value);
					this.SendPropertyChanging();
					this._newsContent = value;
					this.SendPropertyChanged("newsContent");
					this.OnnewsContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_picture", DbType="VarChar(MAX)")]
		public string picture
		{
			get
			{
				return this._picture;
			}
			set
			{
				if ((this._picture != value))
				{
					this.OnpictureChanging(value);
					this.SendPropertyChanging();
					this._picture = value;
					this.SendPropertyChanged("picture");
					this.OnpictureChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
